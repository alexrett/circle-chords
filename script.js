// script.js
// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class ChordProgressionGenerator {
    constructor() {
        this.keySelect = document.getElementById('key-select');
        this.modeSelect = document.getElementById('mode-select');
        this.generateBtn = document.getElementById('generate-btn');
        this.progressionsDiv = document.getElementById('progressions');
        this.visualizationDiv = document.getElementById('visualization');
        this.bassNotesDiv = document.getElementById('bass-notes');
        this.interactiveCircleContainer = document.getElementById('interactive-circle-container');
        this.circleOfFifths = new CircleOfFifths();
        this.init();
    }

    init() {
        this.generateBtn.addEventListener('click', () => this.generate());

        // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
        this.keySelect.addEventListener('change', () => this.updateAll());
        this.modeSelect.addEventListener('change', () => this.updateAll());

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫—Ä—É–≥
        this.updateInteractiveCircle();
        this.generate();
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –∫—Ä—É–≥
    onTonalityChange(key, mode) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
        this.keySelect.value = key;
        this.modeSelect.value = mode;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—Ä—É–≥ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏
        this.updateAll();
    }

    // –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫—Ä—É–≥
    updateInteractiveCircle() {
        const currentKey = this.keySelect.value;
        const currentMode = this.modeSelect.value;

        const interactiveCircle = this.circleOfFifths.renderInteractiveContainer(
            currentKey,
            currentMode,
            (key, mode) => this.onTonalityChange(key, mode)
        );

        this.interactiveCircleContainer.innerHTML = '';
        this.interactiveCircleContainer.appendChild(interactiveCircle);
    }

    // –û–±–Ω–æ–≤–∏—Ç—å –≤—Å—ë (–∫—Ä—É–≥ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏)
    updateAll() {
        this.updateInteractiveCircle();
        this.generate();
    }

    generate() {
        const key = this.keySelect.value;
        const mode = this.modeSelect.value;
        const progressions = generateProgressions(key, mode);
        this.renderProgressions(progressions, key, mode);
    }

    renderProgressions(progressions, key, mode) {
        this.progressionsDiv.innerHTML = '';
        this.visualizationDiv.innerHTML = '';
        this.bassNotesDiv.innerHTML = '';
        // –£–¥–∞–ª—è–µ–º –æ—á–∏—Å—Ç–∫—É –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
        progressions.forEach((progression, index) => {
            // –ö–∞—Ä—Ç–æ—á–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏
            const card = document.createElement('div');
            card.className = 'progression-card';
            const title = document.createElement('h3');
            title.className = 'progression-title';
            title.textContent = `${progression.name} –≤ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ ${key} ${mode === 'major' ? '–º–∞–∂–æ—Ä' : mode === 'minor' ? '–º–∏–Ω–æ—Ä' : mode}`;
            const description = document.createElement('p');
            description.textContent = progression.description;
            description.style.marginBottom = '15px';
            description.style.color = '#6c757d';
            // –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∞–∫–∫–æ—Ä–¥–æ–≤ —Å —Ç–∞–±–∞–º–∏
            const chordsList = document.createElement('div');
            chordsList.className = 'chords-list';
            progression.chords.forEach(chord => {
                const chordBlock = document.createElement('div');
                chordBlock.style.display = 'flex';
                chordBlock.style.flexDirection = 'column';
                chordBlock.style.alignItems = 'center';
                chordBlock.style.margin = '0 10px';
                // –ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫–∫–æ—Ä–¥–∞
                const chordNameDiv = document.createElement('div');
                chordNameDiv.className = 'chord-item';
                chordNameDiv.textContent = chord.name;
                chordBlock.appendChild(chordNameDiv);
                // –î–∏–∞–≥—Ä–∞–º–º–∞ –∞–∫–∫–æ—Ä–¥–∞
                const diagram = renderChordDiagram(chord.name);
                if (diagram) {
                    chordBlock.appendChild(diagram);
                }
                chordsList.appendChild(chordBlock);
            });
            card.appendChild(title);
            card.appendChild(description);
            card.appendChild(chordsList);

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤—Å–µ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            const playProgressionBtn = document.createElement('button');
            playProgressionBtn.className = 'play-progression-btn';
            playProgressionBtn.innerHTML = '‚ñ∂Ô∏è –ü—Ä–æ–∏–≥—Ä–∞—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å';
            playProgressionBtn.addEventListener('click', async () => {
                if (typeof window.chordPlayer !== 'undefined') {
                    await window.chordPlayer.playProgression(progression.chords);
                }
            });
            card.appendChild(playProgressionBtn);

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–ª–Ω–æ–π –∞—Ä–∞–Ω–∂–∏—Ä–æ–≤–∫–∏
            const playFullBtn = document.createElement('button');
            playFullBtn.className = 'play-full-btn';
            playFullBtn.innerHTML = 'üéµ –ü—Ä–æ–∏–≥—Ä–∞—Ç—å —Å –±–∞—Å–æ–º –∏ –≤–æ–∫–∞–ª–æ–º';
            playFullBtn.addEventListener('click', async () => {
                if (typeof window.chordPlayer !== 'undefined') {
                    const bassNotes = getBassNotes(progression.chords).map(b => b.bassNote);
                    const scaleNotes = getScale(key, mode);
                    await window.chordPlayer.playFullArrangement(progression.chords, bassNotes, scaleNotes);
                }
            });
            card.appendChild(playFullBtn);

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–≤–∏–Ω—Ç–æ–≤—ã–π –∫—Ä—É–≥
            if (typeof CircleOfFifths !== 'undefined') {
                const circleOfFifths = new CircleOfFifths();
                const circleContainer = circleOfFifths.renderCircleContainer(
                    key,
                    mode,
                    progression.chords,
                    progression.name
                );
                card.appendChild(circleContainer);
            }

            // –ë–∞—Å–æ–≤—ã–µ –Ω–æ—Ç—ã –∏ –≥—Ä–∏—Ñ –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
            const bassNotes = getBassNotes(progression.chords);
            const bassRootNotes = bassNotes.map(b => b.bassNote);
            card.appendChild(renderBassFretboard(bassRootNotes, '–ë–∞—Å–æ–≤—ã–µ –Ω–æ—Ç—ã –Ω–∞ –≥—Ä–∏—Ñ–µ (4 —Å—Ç—Ä—É–Ω—ã)'));
            card.appendChild(renderNoteList(bassRootNotes, '–ë–∞—Å–æ–≤—ã–µ –Ω–æ—Ç—ã'));
            // –í–æ–∫–∞–ª—å–Ω—ã–µ –Ω–æ—Ç—ã –∏ –≥—Ä–∏—Ñ –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
            const scaleNotes = getScale(key, mode);
            card.appendChild(renderVocalFretboard(scaleNotes, '–í–æ–∫–∞–ª—å–Ω—ã–µ –Ω–æ—Ç—ã –Ω–∞ –≥—Ä–∏—Ñ–µ (6 —Å—Ç—Ä—É–Ω)'));
            card.appendChild(renderNoteList(scaleNotes, '–í–æ–∫–∞–ª—å–Ω—ã–µ –Ω–æ—Ç—ã'));
            this.progressionsDiv.appendChild(card);
        });
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
async function initializeApp() {
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        const config = await window.configLoader.loadAll();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏ —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        initializeScales(config);
        initializeChords(config);
        initializeProgressions(config);
        initializeCircleOfFifths(config);

        // –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        const app = new ChordProgressionGenerator();

        console.log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∏–∑ JSON —Ñ–∞–π–ª–æ–≤');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
        alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.');
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
window.addEventListener('DOMContentLoaded', initializeApp);
